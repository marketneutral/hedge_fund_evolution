{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"The Evolution of the Hedge Fund\"\n",
        "subtitle: \"Guest Lecture for MIT 18.5096<br>*Topics in Mathematics with Applications in Finance*\"\n",
        "author: \"Jonathan Larkin\"\n",
        "date: \"October 2, 2025\"\n",
        "date-format: \"MMMM D, YYYY\"\n",
        "format:\n",
        "  revealjs:\n",
        "    self-contained: true\n",
        "    menu: false\n",
        "    slide-number: c/t\n",
        "theme:\n",
        "  - moon\n",
        "---\n",
        "\n",
        "\n",
        "## Disclaimer\n",
        "\n",
        "\n",
        "```{=html}\n",
        "<style type=\"text/css\">\n",
        ".reveal .slide-logo {\n",
        "  bottom: 0;\n",
        "  left: 24px\n",
        "}\n",
        "\n",
        ".reveal .slide-number {\n",
        "  bottom: 10px;\n",
        "  right: 10px;\n",
        "  left: auto;\n",
        "  top: auto;\n",
        "}\n",
        "\n",
        "</style>\n",
        "```\n",
        "\n",
        "\n",
        "This presentation is for informational purposes only and reflects my personal views and interests. It does not constitute investment advice and is not representative of any current or former employer. The information presented is based on publicly available sources. References to specific firms are for illustrative purposes only and do not imply endorsement.\n",
        "\n",
        "\n",
        "## About Me\n",
        "\n",
        "Managing Director at Columbia Investment Management Co., LLC, generalist allocator, Data Science and Research lead. Formerly CIO at Quantopian, Global Head of Equities and Millennium Management LLC, and Co-Head of Equity Derivatives Trading at JPMorgan.\n",
        "\n",
        "- X/Twitter [@jonathanrlarkin](https://x.com/jonathanrlarkin)\n",
        "- LinkedIn [linkedin.com/in/quantfinance](linkedin.com/in/quantfinance)\n",
        "  \n",
        "This presentation in source and rendered form is available on my GitHub at [github.com/marketneutral/hedge_fund_evolution](github.com/marketneutral/hedge_fund_evolution).\n",
        "\n",
        "\n",
        "\n",
        "## What Evolution?\n",
        "\n",
        "Two trends\n",
        "\n",
        "- Unbundling\n",
        "- Human + Machine Collaboration\n",
        "\n",
        "\n",
        "\n",
        "# Theory\n",
        "\n",
        "## Condorcet Jury Theorem (1785)\n",
        "- The *Condorcet Jury Theorem* states that if each member of a jury has a probability greater than 1/2 of making the correct decision, then as the number of jurors increases, the probability that the majority decision is correct approaches 1.\n",
        "\n",
        "$$\n",
        "P(\\text{majority correct}) \\to 1 \\text{ as } n \\to \\infty \\\\\n",
        "\\iff \\text{independence of errors}\n",
        "$$\n",
        "\n",
        "::: {.incremental}\n",
        "- e.g., `sklearn.ensemble.VotingClassifier` relies on this result.\n",
        ":::\n",
        "\n",
        "## Boosting Weak Learners (1988)\n",
        "- Kearns, Michael. *Thoughts on Hypothesis Boosting*. 1988.\n",
        "- Friedman, Jerome H. *Greedy function approximation: A gradient boosting machine*. 2001.\n",
        "- Sequentially train many \"weak learner\" models, each focusing on the errors of the previous ones.\n",
        "- e.g., `sklearn.ensemble.HistGradientBoostingClassifier`, `xgboost`, `lightgbm`, `catboost`\n",
        "- Gradient boosted decision trees are the dominant approach in tabular machine learning still today.\n",
        "\n",
        "## Boosting in a Nutshell  \n",
        "\n",
        "- The final model after **M rounds** is a weighted sum of weak models, $h_m(x)$.\n",
        "$$\n",
        "F_M(x) = \\sum_{m=1}^M \\gamma h_m(x)\n",
        "$$\n",
        "\n",
        "- Each step fits a learner to residuals (or negative gradient).\n",
        "\n",
        "$$\n",
        "F_m(x) = F_{m-1}(x) + \\gamma h_m(x)\n",
        "$$\n",
        "\n",
        "ðŸ‘‰ Each new learner reduces the cumulative errors.\n",
        "\n",
        "\n",
        "\n",
        "## Model Stacking (1992)\n",
        "- Wolpert, David H. *Stacked Generalization*. 1992.\n",
        "- Train \"meta-model\" on the predictions of base models.\n",
        "- Works best when base models are diverse and capture different aspects of the data.\n",
        "- e.g., `sklearn.ensemble.StackingClassifier`\n",
        "\n",
        "## Stacking in a Nutshell\n",
        "\n",
        "- Combine multiple different models by training a new model on their predictions.  \n",
        "- **Step 1:** Train base models (e.g. linear regression, tree, neural net).  \n",
        "- **Step 2:** Collect their predictions on **out-of-fold data**.  \n",
        "- **Step 3:** Train a **meta-model** on those predictions.  \n",
        "$$\n",
        "\\hat{y} = g\\big(f_1(x), f_2(x), \\dots, f_K(x)\\big)\n",
        "$$  \n",
        "where $f_k$ are base models, and $g$ is the meta-model.  \n",
        "\n",
        "ðŸ‘‰ Leverages strengths of different models.  \n",
        "\n",
        "\n",
        "## Stacking into Boosting\n",
        "- Why not both?\n"
      ],
      "id": "f6c8450b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "lin = Pipeline([\n",
        "  (\"scaler\", StandardScaler()),\n",
        "  (\"lr\", LogisticRegression(max_iter=1000))\n",
        "])\n",
        "\n",
        "stack = StackingClassifier(estimators=[(\"lin\", lin)],\n",
        "  final_estimator=LGBMClassifier(),\n",
        "  stack_method=\"predict_proba\", passthrough=True, cv=cv\n",
        ")\n",
        "\n",
        "stack.fit(X_train, y_train)\n",
        "y_pred = stack.predict(X_test)"
      ],
      "id": "31645060",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## The Dunbar Number (1992)\n",
        "\n",
        "- Dunbar, R. I. M. (1992). *Neocortex size as a constraint on group size in primates.* Journal of Human Evolution, 22(6), 469â€“493.\n",
        "- Human maintainable stable relationships â‰ˆ 150\n",
        "- Limit of trust & cohesion  \n",
        "- Beyond â†’ silos, slow decisions, culture strain  \n",
        "\n",
        "---\n",
        "\n",
        "## Dunbar cont'd: How Hedge Funds Manage It\n",
        "\n",
        "- **Pods** â†’ small teams, central risk  \n",
        "- **Quant** â†’ scale with models, not people  \n",
        "- **Lean** â†’ keep a cap on size, preserve culture  \n",
        "- **Bureaucracy** â†’ heavy process to scale  \n",
        "\n",
        "ðŸ‘‰ Hedge funds scale by respecting Dunbar or trying to build around it.  \n",
        "\n",
        "\n",
        "## Wisdom of Crowds (2004)\n",
        "\n",
        "- Surowiecki, James. *The Wisdom of Crowds: Why the Many Are Smarter Than the Few and How Collective Wisdom Shapes Business, Economies, Societies, and Nations*. Doubleday, 2004.\n",
        "- For the crowd to be smarter than experts, we require\n",
        "  - *Diversity of opinion*\n",
        "  - *Independence of members*\n",
        "  - *Decentralization*\n",
        "  - *Aggregation of information*\n",
        "  \n",
        "\n",
        "## The Common Task Framework (2007-)\n",
        "\n",
        "- Donoho, D. (2017). \"50 Years of Data Science.\" *Journal of Computational and Graphical Statistics*, 26(4), 745â€“766.\n",
        "  - *Define a clear task (e.g., image recognition).*\n",
        "  - *Provide dataset + ground truth labels + hidden test set.*\n",
        "  - *Set evaluation metric (accuracy, F1, etc.).*  \n",
        "  - *Run open competition among researchers.*  \n",
        "- *Netflix Prize* (2006), *Kaggle* (2010), *ImageNet* (2012)...\n",
        "\n",
        "::: {.incremental}\n",
        "- \"The Kaggle Grandmasters Playbook: 7 Battle-Tested Modeling Techniques for Tabular Data\", September 18, 2025, Nvidia Blog, [link.](https://developer.nvidia.com/blog/the-kaggle-grandmasters-playbook-7-battle-tested-modeling-techniques-for-tabular-data/)\n",
        ":::\n",
        "\n",
        "\n",
        "## Machine, Platform, Crowd (2017)\n",
        "\n",
        "- Bryan McAfee and Erik Brynjolfsson. *Machine, Platform, Crowd: Harnessing Our Digital Future*. W. W. Norton & Company, 2017.\n",
        "  - *Wisdom of crowd means groups > individual experts*\n",
        "  - *Platforms unlock assets (Uber, Airbnb)*\n",
        "  - *Innovation from open-source & collaboration*\n",
        "  - *Trust via ratings (leaderboards)*\n",
        "  - *Success is $f(\\text{incentives}, \\text{governance})$*\n",
        "\n",
        "\n",
        "## Theory Takeaways\n",
        "- Successes in machine learning demonstrate the critical importance of ensemble methods.\n",
        "- The Common Task Framework has driven scientific progress at scale.\n",
        "- Social science principles can inform on the design of incentives and processes to harness collective intelligence.\n",
        "\n",
        "\n",
        "# The Traditional Hedge Fund\n",
        "\n",
        "\n",
        "## Quant Equity Workflow\n",
        "\n",
        "- Larkin, Jonathan R., \"A Professional Quant Equity Workflow\", *Quantopian Blog*, 2016, [link.](https://github.com/marketneutral/lectures/blob/master/A%20Professional%20Quant%20Equity%20Workflow.pdf)\n",
        "- Separate teams are focused along an assembly line\n",
        "  - Data acquisition\n",
        "  - Alpha research (aka feature engineering)\n",
        "  - Signal combination (aka modeling)\n",
        "  - Risk and transaction cost modeling\n",
        "  - Portfolio construction (aka optimization)\n",
        "  - Execution\n",
        "\n",
        "\n",
        "## Quant Equity Workflow\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-height: 4\n",
        "flowchart LR\n",
        "\n",
        "    DATA(Data) --> UDEF(Universe Definition)\n",
        "\n",
        "    UDEF --> A1(alpha 1)\n",
        "    UDEF --> A2(alpha 2)\n",
        "    UDEF --> ADOTS(alpha...)\n",
        "    UDEF --> AN(alpha N)\n",
        "\n",
        "    A1 --> ACOMBO(Alpha Combination)\n",
        "    A2 --> ACOMBO\n",
        "    ADOTS --> ACOMBO\n",
        "    AN --> ACOMBO\n",
        "\n",
        "    DATA --> TARGET(Target)\n",
        "    TARGET --> ACOMBO\n",
        "    TARGET --> PCON\n",
        "    DATA --> RISK(Risk & T-Cost Models)\n",
        "\n",
        "    ACOMBO --> PCON(Optimization)\n",
        "    RISK --> PCON\n",
        "\n",
        "    PROD{{t-1 Portfolio}} --> PCON\n",
        "    PCON --> IDEAL{{Ideal Portfolio}}\n",
        "    IDEAL --> EXEC\n",
        "    \n",
        "    EXEC(Execution)\n",
        "```\n",
        "\n",
        "\n",
        "## Workflow: Minimal Non-Trivial Implementation\n",
        "\n",
        "- Craft four simple alphas (momentum, reversal, quality, value)\n",
        "- Create a target (forward 5d return demeaned)\n",
        "- Combine alphas with linear model\n",
        "- Use `cvxportfolio` machinery for risk model, t-cost model, optimization\n",
        "- [Cvxportfolio repo on github](https://github.com/cvxgrp/cvxportfolio)\n",
        "- Boyd, Stephen, et al. \"Multiâ€‘Period Trading via Convex Optimization.\" *Foundations and Trends in Optimization*, vol.â€¯3, no.â€¯1, 2017, pp.â€¯1â€“76.\n",
        "\n",
        "\n",
        "## Workflow: Helpers"
      ],
      "id": "728fab09"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "import pandas as pd, numpy as np\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import cvxportfolio as cvx\n",
        "from typing import Dict, List\n",
        "import yfinance as yf\n",
        "\n",
        "def xsec_z(df: pd.DataFrame) -> pd.DataFrame:\n",
        "    \"\"\"Cross-sectional z-score by date.\"\"\"\n",
        "    m, s = df.mean(1), df.std(1).replace(0, 1)\n",
        "    return df.sub(m, 0).div(s, 0)\n",
        "\n",
        "def cs_demean(df: pd.DataFrame) -> pd.DataFrame:\n",
        "    \"\"\"Cross-sectional demean by date.\"\"\"\n",
        "    return df.sub(df.mean(1), 0)\n",
        "\n",
        "def make_panel(features: Dict[str, pd.DataFrame], target: pd.DataFrame) -> pd.DataFrame:\n",
        "    \"\"\"Wide (dateÃ—asset) â†’ long panel with features + target.\"\"\"\n",
        "    X = pd.concat(features, axis=1)  # MultiIndex columns: (feat, asset)\n",
        "    X = X.stack().rename_axis(['date','asset']).reset_index()\n",
        "    Y = target.stack().rename('y').reset_index()\n",
        "    return X.merge(Y, on=['date','asset']).dropna()\n",
        "\n",
        "class ReturnsFromDF:\n",
        "    \"\"\"Forecaster wrapper for cvxportfolio (date Ã— asset DataFrame).\"\"\"\n",
        "    def __init__(self, df: pd.DataFrame): self.df = df\n",
        "    def __call__(self, t, h, universe, **k):\n",
        "        # Robust to missing dates (e.g., holidays) and assets\n",
        "        if t not in self.df.index:\n",
        "            return pd.Series(0.0, index=universe, dtype=float)\n",
        "        return self.df.loc[t].reindex(universe).fillna(0.0)"
      ],
      "id": "120c6130",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Workflow: Universe, Alphas, Targets\n"
      ],
      "id": "bd70df38"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "assets = ['AAPL','AMZN','TSLA','GM','CVX','NKE']\n",
        "\n",
        "# Prices (Adj Close)\n",
        "prices = yf.download(assets, start=\"2015-01-01\", progress=False)['Adj Close'].dropna(how='all')\n",
        "\n",
        "# Example price-only signals:\n",
        "mom = prices.pct_change(60)             # 3m momentum (approx)\n",
        "rev = -prices.pct_change(5)             # 1w reversal proxy\n",
        "vol = prices.pct_change().rolling(60).std()  # 3m volatility\n",
        "qual = -vol                        # \"quality\" proxy = low vol\n",
        "\n",
        "# Map to your earlier variable names (so slides run unchanged)\n",
        "btp  = (prices.rolling(252).mean() / prices)  # crude \"value\" proxy\n",
        "roa  = qual\n",
        "\n",
        "val  = btp[assets]  # value\n",
        "qual = roa[assets]  # quality\n",
        "rev  = rev[assets]  # reversal\n",
        "\n",
        "# Cross-sectional z-scoring\n",
        "mom_z, val_z, qual_z, rev_z = map(xsec_z, [mom, val, qual, rev])\n",
        "\n",
        "# Target: next-period return, cross-section demeaned\n",
        "r1   = prices[assets].pct_change().shift(-1)\n",
        "y_cs = cs_demean(r1)\n",
        "\n",
        "# Index alignment (avoid silent misalignment)\n",
        "idx = (mom_z.index\n",
        "  .intersection(val_z.index)\n",
        "  .intersection(qual_z.index)\n",
        "  .intersection(rev_z.index)\n",
        "  .intersection(y_cs.index))\n",
        "\n",
        "mom_z, val_z, qual_z, rev_z, y_cs = \\\n",
        "  mom_z.loc[idx], val_z.loc[idx], qual_z.loc[idx], rev_z.loc[idx], y_cs.loc[idx]\n",
        "\n",
        "# Feature dict (single source of truth for names/order)\n",
        "FEATS = {'mom': mom_z, 'val': val_z, 'qual': qual_z, 'rev': rev_z}"
      ],
      "id": "e2cc9fc5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Workflow: Alpha Combination\n"
      ],
      "id": "23a9df38"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "from scipy.stats.mstats import winsorize\n",
        "\n",
        "def walk_forward_oof(panel: pd.DataFrame, feature_cols: List[str],\n",
        "                     assets: List[str], warm: int = 60) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    Expanding fit: train on dates < t, predict on date == t (out-of-sample).\n",
        "    Returns alpha (dateÃ—asset). Gracefully handles short histories.\n",
        "    \"\"\"\n",
        "    dates = np.sort(panel['date'].unique())\n",
        "    alpha = pd.DataFrame(index=dates, columns=assets, dtype=float)\n",
        "    model = LinearRegression()\n",
        "\n",
        "    if len(dates) <= max(warm, 1):  # not enough data to train\n",
        "        return alpha.fillna(0.0)\n",
        "\n",
        "    for i, t in enumerate(dates):\n",
        "        if i < warm:\n",
        "            continue\n",
        "        train = panel[panel['date'] < t]\n",
        "        test  = panel[panel['date'] == t]\n",
        "        if len(train) == 0 or test.empty:\n",
        "            continue\n",
        "        model.fit(train[feature_cols], train['y'])\n",
        "        alpha.loc[t, test['asset'].values] = model.predict(test[feature_cols])\n",
        "\n",
        "    return alpha.fillna(0.0)\n",
        "\n",
        "panel = make_panel(FEATS, y_cs)\n",
        "alpha = walk_forward_oof(panel, list(FEATS.keys()), assets, warm=60)\n",
        "\n",
        "# Stabilize: winsorize (5thâ€“95th percentile per date)\n",
        "alpha = alpha.apply(lambda row: \n",
        "    pd.Series(winsorize(row, limits=[0.05, 0.05]), index=row.index),\n",
        "    axis=1\n",
        ")"
      ],
      "id": "292e37dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Workflow: Optimization, Execution\n"
      ],
      "id": "87a1f7e0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| echo: true\n",
        "rf = ReturnsFromDF(alpha)\n",
        "gamma = 3.0\n",
        "kappa = 0.05\n",
        "\n",
        "obj = (cvx.ReturnsForecast(forecaster=rf)\n",
        "  - gamma * (cvx.FullCovariance() + kappa * cvx.RiskForecastError())\n",
        "  - cvx.StocksTransactionCost()\n",
        ")\n",
        "\n",
        "constraints = [cvx.LeverageLimit(3)]\n",
        "policy = cvx.MultiPeriodOptimization(obj, constraints, planning_horizon=2)\n",
        "\n",
        "start = str(alpha.index.min().date()) if len(alpha.index) else '2020-01-01'\n",
        "sim = cvx.StockMarketSimulator(assets)\n",
        "result = sim.backtest(policy, start_time=start)"
      ],
      "id": "b1c2a87f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Worflow: Results!\n",
        "\n",
        "\n",
        "## Quant Equity Workflow\n",
        "\n",
        "::: columns\n",
        "::: column\n",
        "- Hope, Bradley. \"With 125 Ph.D.s in 15 Countries, a Quant 'Alpha Factory' Hunts for Investing Edge.\" *Wall Street Journal*, April 5, 2017. [link](https://www.wsj.com/articles/with-125-ph-d-s-in-15-countries-a-quant-alpha-factory-hunts-for-investing-edge-1491471008)\n",
        ":::\n",
        "\n",
        "::: column\n",
        "![](https://si.wsj.net/public/resources/images/BF-AP653_WORLDQ_G_20170406061514.jpg){width=\"95%\"}\n",
        ":::\n",
        ":::\n",
        "\n",
        "\n",
        "# Unbundling\n",
        "\n",
        "\n",
        "\n",
        "# Human + Machine\n",
        "\n",
        "## Types of Collaboration\n",
        "- Vertical\n",
        "- Horizontal\n",
        "- \"Bayesian\"\n",
        "\n",
        "## Vertical\n",
        "\n",
        "## Horizontal\n",
        "\n",
        "## Bayesian\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## More shortcomings of our JupyterHub setup\n",
        "\n",
        "- The `.py` editor is just a text editor; no linting, no auto-complete\n",
        "- Project conflicts abound (all projects share the same environment!)\n",
        "- All users are bound to the single `datascience-research` server (that's where the docker images live)\n",
        "\n",
        "## vs code + ssh solution \n",
        "\n",
        "\n",
        "\n",
        "- Get rid of JupyterHub and docker images!!?\n",
        "- User runs VS Code *locally on laptop* and connects to the `datascience-research` (or *another*) server via VS Code SSH Extension\n",
        "- Each project has its own complete (server-side) environment (i.e., conda `.yml`)\n",
        "- IMC customizations (e.g., MS SQL) are done at root level on the server and available to all projects\n",
        "\n",
        "## VS CODE + SSH Benefits\n",
        "\n",
        "- Each repo will have a `.yml` file that *fully* describes the environment\n",
        "- User can work with `.ipynb`, `.py`, `.md`, etc. files with the full power of VS Code *and* full remote compute power\n",
        "- AI integration is first class (e.g., GitHub Copilot; Cursor is a VS Code fork)\n",
        "- Millions of people use VS Code; very well supported\n",
        "- Things \"just work\" (e.g., this presentation was created in VS Code with Quarto on the server)\n",
        "- No containers to build or maintain\n",
        "\n",
        "## Demo\n",
        "\n",
        "![](images/vscode.png)\n",
        "\n",
        "## Why Now? Why didn't we do this from the start?\n",
        "- VS Code with SSH and first-class Jupyter support was not available in 2018\n",
        "- Desire for AI asssisted development is new and led to exploring alternatives\n",
        "- Docker containers proved *more difficult* to maintain\n",
        "- The complexity of IMC data science projects was *over*estimated (i.e., we don't need to support very many packages)\n",
        "- We will soon be three power users and we **need** simplicity and reproducibility\n"
      ],
      "id": "8215599d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}